// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  authProvider  String
  authProviderId String
  createdAt     DateTime  @default(now())
  preferences   Json?     // Store notification and theme preferences
  tickers       Ticker[]
}

model Ticker {
  id          String    @id @default(uuid())
  symbol      String
  companyName String
  userId      String
  addedAt     DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  summaries   Summary[]
  
  @@unique([userId, symbol])
}

model Summary {
  id          String    @id @default(uuid())
  tickerId    String
  filingType  String    // "10-K", "10-Q", "8-K", "Form4"
  filingDate  DateTime
  filingUrl   String
  summaryText String    @db.Text
  summaryJSON Json?
  createdAt   DateTime  @default(now())
  sentToUser  Boolean   @default(false)
  ticker      Ticker    @relation(fields: [tickerId], references: [id], onDelete: Cascade)
}

// Model for mapping ticker symbols to SEC Central Index Keys (CIK)
model CikMapping {
  id                String    @id @default(uuid())
  cik               String    @unique // Central Index Key with leading zeros
  ticker            String    // Primary ticker symbol
  companyName       String    // Company name from SEC
  aliases           String[]  // Alternative ticker symbols or company names
  exchangeCodes     String[]  // Stock exchange codes (e.g., NYSE, NASDAQ)
  sic               String?   // Standard Industrial Classification code
  ein               String?   // Employer Identification Number
  entityType        String?   // Type of entity (e.g., "Corporation", "Limited Partnership")
  formerNames       Json?     // Historical company names with effective dates
  formerTickers     Json?     // Historical ticker symbols with effective dates
  lastUpdated       DateTime  @default(now())
  fetchAttempts     Int       @default(0) // Number of attempts to fetch data
  lastFetchStatus   String?   // Status of the last fetch attempt
  isActive          Boolean   @default(true) // Whether the company is still active

  @@index([ticker])
  @@index([companyName])
}

// Model to track changes to ticker symbols over time (mergers, acquisitions, etc.)
model TickerChange {
  id              String    @id @default(uuid())
  oldTicker       String
  newTicker       String
  oldCik          String?
  newCik          String?
  effectiveDate   DateTime
  changeType      String    // "Merger", "Acquisition", "NameChange", "Spinoff", etc.
  description     String?
  createdAt       DateTime  @default(now())

  @@index([oldTicker])
  @@index([newTicker])
  @@index([effectiveDate])
}
